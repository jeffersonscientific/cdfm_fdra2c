#ifndef INCLUDE_DC3DM_COMMON
#define INCLUDE_DC3DM_COMMON

// Some routines and definitions for use in the dc3dm main programs.

#include <string>
#include "util/include/KeyValueFile.hpp"
using namespace std;
using namespace util;

/* Help text for programs. I write the text in a plain text file and then run
   this routine:

     function WrapPrintHelp(fn)
       fid = fopen(fn, 'r');
       while (true)
         ln = fgetl(fid);
         if (~ischar(ln)) break; end
         fprintf('%s\\n\\\n', ln);
       end
       fclose(fid);
     end

   For example: WrapPrintHelp('help.txt'). */

#define _dc3dm_Header_text_ \
"\nfrom\n\n\
dc3dm: Software to\n\
  - nonuniformly discretize a rectangular planar fault in a halfspace,\n\
  - compute an H-matrix approximation to the matrix of slip-stress elasticity\n\
    Green's functions computed using Y. Okada's DC3D,\n\
  - and compute matrix-vector products with this matrix.\n\
See dc3dmMesh:    Mesh the rectangle according to a resolution function.\n\
    dc3dmBuild    Build the fault.\n\
    dc3dmCompress Form and compress the elasticity matrix.\n\
    dc3dm.m       Matlab interface.\n\
Version 0.0\n\
A.M. Bradley ambrad@cs.stanford.edu\n\
CDFM Group, Geophysics, Stanford University\n"

#define _dc3dmMesh_PrintHelp_text_ \
"dc3dmMesh key_value_file\n\
\n\
  mesh_write_filename [string]: The suffix .rmu is appended to it. This file\n\
    contains data about the mesh. Let Nr be the number of rectangles. Call the\n\
    ordering of mesh data 'mesh order'.\n\
\n\
  min_len, max_len [scalar]: Minimum and maximum side length of a\n\
    rectangle. max_len is strictly enforced, but some elements may be smaller\n\
    than min_len, though not not smaller than min_len/2.\n\
\n\
  x, y [1D array]: Tensor mesh points relative to an arbitrary origin. The\n\
    domain extends from x(1) to x(end), y(1) to y(end), and so has the\n\
    dimensions\n\
        xlen = x(end) - x(1)\n\
        ylen = y(end) - y(1).\n\
    We use the word 'square' to mean the rectangle that has side lengths\n\
        xlen / ceil(xlen/max_len)  and  ylen / ceil(ylen/max_len).\n\
    Hence to get geometric squares, xlen and ylen should be divisible by\n\
    max_len.\n\
\n\
  f [2D array]: ny x nx array of f(x, y). f should be sampled enough that linear\n\
    interpolation is sufficient to represent the continuous function. Then the\n\
    mesh is refined so that max f in a square is equal to the square's side\n\
    length\n"

#define _dc3dmBuild_PrintHelp_text_ \
"dc3dmBuild key_value_file\n\
\n\
  mesh_read_filename [string]: .rmu file, without suffix, from dc3dmMesh.\n\
\n\
  build_write_filename [string]: Three files are created with suffixes .ra,\n\
    .bmb, .hd, and .build appended to it.\n\
\n\
  depth_min [scalar]: Minimum depth of fault.\n\
\n\
  dipdeg [scalar]: Dipping angle of the fault in degrees. The fault dips in the\n\
    N-S direction. If positive, the S side is deeper than the N side, and\n\
    opposite if negative.\n\
\n\
  neighborhood [scalar]: Specify the size of the neighborhood for calculating\n\
    the high-order BEM elements. 0 gives constant-slip elements, 1 makes all\n\
    elements have a neighborhood including at least adjacent elements, and\n\
    larger numbers improve the approximation. hmmvpCompress takes longer with\n\
    larger neighborhood. I recommend 4, which is the default if left\n\
    unspecified.\n\
\n\
  Boundary conditions (BC). There are four types of BC:\n\
      Velocity (v-BC). A large slab adjacent to the boundary imposes a constant\n\
    slip rate.\n\
      0-velocity (0v-BC). The slab is at 0 slip rate. This is treated specially\n\
    for computational reasons.\n\
      Periodic. Opposite sides are mapped to each other.\n\
      Free. This occurs on the boundary that is at 0 depth (depth_min = 0), if\n\
    there is one.\n\
      BC are handled by specifying a set of strings. These are as\n\
    follows. First, the cardinal directions of the fault are\n\
        [e]ast: positive-x (strike) direction\n\
        [n]orth: positive-y (dip) direction.\n\
    [w]est and [s]outh follow from these. Specify a subset of these keys:\n\
        [e|n|s|w]0vbc [scalar]: 0v-BC on one of the cardinal sides.\n\
        [e|n|s|w]vbc [scalar]: v-BC on one of the cardinal sides.\n\
        [ew|ns]pbc [scalar]: Priodic on the east-west or north-south sides.\n\
    The default for all sides is [e|n|w|s]0vbc set to 0.\n\
      The value associated with one of these keys is the dominance of the\n\
    boundary condition; a higher number increases dominance. For example, if\n\
    this is specified:\n\
        evbc: 1, wvbc: 2, n0vbc: 3,\n\
    then (1) 's0vbc' is assumed to have been specified with value 0 and (2)\n\
    large slabs used to approximate the v-BC extend deep south (east and west\n\
    are dominant relative to south) but end at the north side (since the north\n\
    boundary is specified as dominant). Here is a diagram of this example:\n\
                               N: 0 v-BC\n\
                  __________________________________\n\
                           |              | \n\
                   W: v-BC |    domain    | E: v-BC\n\
                           |______________|\n\
                           |   S: 0 v-BC  |\n\
    The issue of ordering matters only for (0-)velocity BC; values for periodic\n\
    BC are ignored. If two values are the same and the boundaries interfere, the\n\
    results are undefined.\n\
      If depth_min is 0, then the boundary at the surface has a free boundary\n\
    condition. This overrides any specification.\n\
      Generally, E-W (along-stride) periodic BC make sense but N-S ones do not\n\
    because of the halfspace.\n\
      As a hint, a subducting fault going to the surface, with y = 0 on the\n\
    updip end, is specified with dipdeg < 0, depth_min = 0. disl_dip > 0 is a\n\
    dislocation in the +y direction. Quite likely, a velocity BC is specified on\n\
    the N side: nvbc = 1; a free surface is on the S side, so it does not have\n\
    to be specified; and the E-W sides are one of these: (1) 0-velocity BC,\n\
    which hold by default; (2) evbc = 2, wvbc = 3; or (3) periodic: ewpbc =\n\
    0. This is written in Matlab as:\n\
        c.dipdeg = -12; c.depth_min = 0; c.nvbc = 1; c.ewpbc = 0;\n\
\n\
  bc_periodic_nlayers [scalar]: Number of periodic source image layers to use if\n\
    any periodic BC are specified. 0 is just the primary source patch, which is\n\
    not a bad approximation because the primary source patch is chosen to be the\n\
    nearest periodically-repeated source to a receiver. A number K larger than 0\n\
    uses K layers of images. I recommend 1, which is the default if left\n\
    unspecified.\n"

#define _dc3dmCompress_PrintHelp_text_ \
"dc3dmCompress key_value_file\n\
\n\
  mesh_read_filename [string]: the .rmu file, without suffix, from dc3dmMesh.\n\
\n\
  build_read_filename [string]: the .ra, .bmb, .hd, and .build files, without\n\
    suffix, from dc3dmBuild.\n\
\n\
  hm_write_filename [string]: The file to which to write the H-Matrix data. The\n\
    suffix .hm is appended to it.\n\
      In addition, a file with suffix .bc is created. It stores 4*Nr binary\n\
    double-precision numbers containing the velocity boundary condition\n\
    data. The BC is that the medium on all sides specified by the '[e|n|w|s]vbc'\n\
    data slide at the same speed in the direction of 'component'. If a side does\n\
    not have a velocity BC, then the entries are 0. Ordering is as follows: Nr\n\
    double-precisions for the E BC, then N, then W, then S.\n\
\n\
  hm_use_filename [string, optional]: An old H-matrix file for the same problem\n\
    that can be used to speed up constructing this one. This is generally useful\n\
    only if the old H-matrix was constructed at a higher tolerance than this new\n\
    one.\n\
\n\
  allow_overwrite [scalar, optional]: Says whether the files associated with\n\
    hm_write_filename can be overwritten. If it is not provided, then overwrite\n\
    of these files is not allowed. If only the .bc file exists, then overwrite\n\
    is allowed.\n\
\n\
  component [scalar, optional]: Component to compute [default 1]:\n\
        0 - along strike, 1 - along dip, 2 - normal.\n\
\n\
  disl_strike, disl_dip, disl_tensile [scalar]: Dislocation in the strike,\n\
    dip, and tensile directions, as in Y. Okada's routine dc3d.\n\
\n\
  tol [scalar, optional]: Specifies the approximation error:\n\
        ||B_approx - B||_F <= tol ||B||_F,\n\
  where ||.||_F is the Frobenius norm, B is the matrix of Green's functions, and\n\
  B_approx is the H-matrix approximation. Default is 1e-5.\n\
\n\
  mu, nu [scalar]: Lame parameters.\n\
\n\
  nthreads [scalar, optional]: Number of (OpenMP) threads to use [default 1].\n"

namespace {
bool TestFileWrite (const string& fn) {
  FILE* fid = fopen(fn.c_str(), "wb");
  bool ret = fid;
  if (ret) fclose(fid);
  return ret;
}

struct Inputs;
bool ProcessKvf (const KeyValueFile* kvf, Inputs& in, string& err);

bool GetInputs (Inputs& in, const string& kvf_fn) {
  KeyValueFile* kvf = NewKeyValueFile();
  if (!kvf->Read(kvf_fn) && !kvf->Read(kvf_fn + ".kvf")) {
    cerr << "Can't read " << kvf_fn << endl;
    DeleteKeyValueFile(kvf);
    return false;
  }
  string err;
  if (!ProcessKvf(kvf, in, err)) {
    cerr << "Error: " << err << endl;
    return false;
  }
  DeleteKeyValueFile(kvf);
  return true;
}
}

// Macros to make dc3dm input processing simpler. Some depend on having a string
// err to set.

#define fail_if_not(cond, msg) do {             \
    if (!(cond)) { err = msg; return false; }   \
  } while (0)

#define kvf_have_or_fail(fn, fld, out) do {                             \
    if (!kvf->fn(fld, out)) { err = "Missing " fld "."; return false; } \
  } while (0)

#define run_and_exit_if_Exception(code, announce, label) do {   \
    try {                                                       \
      cout << "-> " << announce << endl;                        \
      code                                                      \
    } catch (const Exception& e) {                              \
      cerr << "When " announce ": " << e.GetMsg() << endl;      \
      goto label;                                               \
    }                                                           \
} while (0)

#endif
