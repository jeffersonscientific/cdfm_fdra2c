#include <stdio.h>
#include <iostream>
#include "util/include/Util.hpp"
#include "util/include/KeyValueFile.hpp"
//#include "util/include/RectMeshUnstruct.hpp"
#include "util/src/RectMeshUnstruct_pri.hpp"
#include "Help.hpp"
using namespace std;
using namespace util;

namespace {
  void PrintHelp()
  {
    fprintf(stdout, _dc3dmMesh_PrintHelp_text_);
    fprintf(stdout, _dc3dm_Header_text_);
  }

  struct Inputs {
    double min_len, max_len;
    Matrix<double> x, y;
    Matrix<double> f;
    string save_filename;
    size_t refine;
  };

  bool ProcessKvf(KeyValueFile* kvf, Inputs& in, string& missing)
  {
    const Matrix<double>* m;
    const string* s;
    double d;
    if (!kvf->GetMatd("x", m)) { missing = "x"; return false; }
    in.x = *m;
    if (!kvf->GetMatd("y", m)) { missing = "y"; return false; }
    in.y = *m;
    if (!kvf->GetMatd("f", m)) { missing = "f"; return false; }
    in.f = *m;
    if (!kvf->GetDouble("min_len", in.min_len))
      { missing = "min_len"; return false; }
    if (!kvf->GetDouble("max_len", in.max_len))
      { missing = "max_len"; return false; }
    if (!kvf->GetString("mesh_write_filename", s) &&
        !kvf->GetString("save_filename", s))
      { missing = "mesh_write_filename"; return false; }
    in.save_filename = *s;
    in.refine = 0;
    if (kvf->GetDouble("refine", d) && d >= 0) in.refine = (size_t) d;
    return true;
  }

  bool TestFileWrite(const string& fn)
  {
    FILE* fid = fopen(fn.c_str(), "w");
    bool ret = fid;
    if (ret) fclose(fid);
    return ret;
  }
}

int main(int argc, char** argv)
{
  if (argc != 2) { PrintHelp(); return -1; }

  Inputs in;
  { KeyValueFile* kvf = NewKeyValueFile();
    if (!kvf->Read(argv[1])) {
      cerr << "Can't read " << argv[1] << endl;
      DeleteKeyValueFile(kvf);
      return -1;
    }
    string missing;
    if (!ProcessKvf(kvf, in, missing)) {
      cerr << "Missing " << missing << endl;
      return -1;
    }
    DeleteKeyValueFile(kvf); }

  if (!TestFileWrite(in.save_filename + ".rmu")) {
    cerr << "Can't write " << in.save_filename << endl;
    return -1;
  }

  const double xlen = in.x(in.x.Size()) - in.x(1);
  const double ylen = in.y(in.y.Size()) - in.y(1);
  const rmesh::Rect domain(in.x(1), in.y(1), xlen, ylen);
  rmesh::TensorMeshLinInterpRF rf(in.x, in.y, in.f);
  const rmesh::RectOpts ro(in.min_len, in.max_len);
  rmesh::RectMeshUnstruct* rmu = NewRectMeshUnstruct(domain, ro, &rf);
  for (size_t i = 0; i < in.refine; i++) rmu->Refine();
  try {
    rmu->Serialize(in.save_filename + ".rmu");
  } catch (const FileException& e) {
    cerr << e.GetMsg() << endl;
    return -1;
  }
 
  DeleteRectMeshUnstruct(rmu);

  return 0;
}
