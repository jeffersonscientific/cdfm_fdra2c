function varargout = exmb (varargin)
% Example usage of hmmvp, driven by Matlab, specialized to Michael Barall.
  [varargout{1:nargout}] = feval(varargin{:});
end

% ------------------------------------------------------------------------------
% Demos.

function ex1 ()
  o = struct('dir','/scratch/ambrad/exmb',...
             'err_method', 'mrem-fro',...
             'tol', 1e-3,...
             'order', 3,...
             'geom', 'edgecube',...
             'N', 3000);

  figure(1); clf;
  p = exmb('make_problem', o);
  c = exmb('write_kvf', p);
  figure(2); clf;
  system(sprintf('./bin/hmmvpbuild %s', c.kvf));
  
  analyze_errors(p, c, 'MREM');
  
  figure(3); clf;
  o.err_method = 'brem-fro';
  p = exmb('make_problem', o);
  c = exmb('write_kvf', p);
  system(sprintf('./bin/hmmvpbuild %s', c.kvf));
  analyze_errors(p, c, 'BREM');
end

function ex2 (hm_filename)
% Demonstrate a matrix-vector product (MVP) in Matlab.
  id = hmmvp('init', hm_filename, 4);
  m = hmmvp('getm', id);
  n = hmmvp('getn', id);
  x = randn(n, 1);
  y = hmmvp('mvp', id, x);
  assert(numel(y) == m);
  % In practice, don't clean up until you're completely done with this H-matrix.
  hmmvp('cleanup', id);
end

% ------------------------------------------------------------------------------
% Public.

function p = make_problem (p)
% Make a test problem based on the simple kernel 1/sqrt(r^2 + delta)^order.
  if (nargin < 1) p = []; end
  p = popts(p, {{'dir' '.'};
                {'tol',1e-5};    % Error tolerance on approx to B
                {'err_method' 'mrem-fro'};
                {'eta' 3};
                {'geom' 'edgecube'};
                {'N' 1000};      % B will be approximately NxN
                {'order' 3};     % Order of the singularity
                {'delta' 1e-4};  % For Plummer softening
                {'wiggle' 0};    % Wiggle the points a little?
                {'vary_charge' 0}}); % Vary the charges by this order of mag.
  p.zero_diag = 0;
  if (p.delta == 0) p.zero_diag = 1; end
  
  switch (p.geom)
    case 'line'
      p.X = [linspace(-1,1,p.N); zeros(1,p.N); zeros(1,p.N)];
    case 'square'
      n = ceil(sqrt(p.N));
      p.N = n^2;
      x = linspace(-1,1,n);
      [X Y] = ndgrid(x,x);
      p.X = [X(:)'; Y(:)'; zeros(1,p.N)];
    case {'cube'}
      n = ceil(p.N^(1/3));
      p.N = n^3;
      x = linspace(-1,1,n);
      [X Y Z] = ndgrid(x,x,x);
      p.X = [X(:)'; Y(:)'; Z(:)'];
    case 'surfcube'
      n = ceil(sqrt(p.N/6));
      p.N = 6*n^2;
      dx = 2/n;
      x = -1+dx/2:dx:1-dx/2;
      o = ones(1,n^2);
      [X Y] = ndgrid(x,x);
      X = X(:)'; Y = Y(:)';
      p.X = [X -X X X o -o; Y Y o -o Y -Y; o -o Y -Y X X];
    case 'edgecube'
      n = ceil(p.N/12);
      p.N = 12*n;
      dx = 2/n;
      x = -1+dx/2:dx:1-dx/2;
      o = ones(1,n);
      p.X = [x x x x -o o -o o -o o -o o;
             -o o -o o x x x x -o -o o o;
             -o -o o o -o -o o o x x x x];
    otherwise
      error(sprintf('geom cannot be %s'),p.geom);
  end

  if (p.wiggle)
    p.X = p.X.*(1 + p.wiggle*randn(size(p.X)));
  end
  
  if (p.vary_charge)
    w = cos(2*pi*(1:p.N)/p.N);
    miw = min(w); maw = max(w);
    w = (w - miw)/(maw - miw);
    p.charge = 1 + w*(10^p.vary_charge - 1);
  else
    p.charge = ones(1, p.N);
  end

  plot3(p.X(1,:),p.X(2,:),p.X(3,:),'.');  
end

function c = write_kvf (p)
  bfn = sprintf(...
    '%s/exmb_g%sN%dor%d_em%stol%deta%1.1f',...
    p.dir, p.geom(1:2), p.N, p.order, p.err_method(1:2), round(log10(p.tol)),...
    p.eta);
  c.command = 'compress';
  c.write_hmat_filename = [bfn '.hm'];
  c.kvf = [bfn '.kvf'];
  c.greens_fn = 'inverse-r';
  c = transfer_fields(c, p, {'err_method' 'tol' 'eta' 'X' 'order' 'delta'});
  c.allow_overwrite = 1;
  kvf('Write', c.kvf, c, 1);
end

function analyze_errors (p, c, ttl)
  n = size(c.X, 2);
  if (n > 4000)
    fprintf('N is too large for analyze_errors.\n');
    return;
  end
  gf_new(p);
  G_true = gf_eval(1:n, 1:n);
  gf_cleanup();
  
  [id nnz] = hmmvp('init', c.write_hmat_filename);
  G = hmmvp('extract', id, 1:n, 1:n);
  hmmvp('cleanup', id);
  
  ewre = abs((G_true - G)./G_true);
  imagesc(log10(ewre)); colorbar;
  cf = n^2/nnz;
  title(sprintf(['%s: image is log_{10} EWRE\n',...
                 'NWRE: %1.2e (requested %1.1e)\n',...
                 'max EWRE: %1.2e\n',...
                 'compression %1.2fx'],...
                ttl, relerr(G_true, G), c.tol, max(ewre(:)), cf));
  set(gca, 'xtick', [], 'ytick', []);
end

% ------------------------------------------------------------------------------
% Private.

function gf_new (p)
% Set up the Green's functions. p is from make_problem. The gf_* routines
% mimic the computations in GreensFnInverseR.cpp for testing in Matlab.
  global gf;
  gf.order = p.order;
  gf.delta = p.delta;
  gf.zero_diag = p.zero_diag;
  gf.X = p.X;
  gf.charge = p.charge;
end
  
function gf_cleanup ()
  clear global gf;
end
  
function B = gf_eval (rs, cs)
% Evaluate B(rs,cs) for the requested rows rs and columns cs.
  global gf;
  nr = length(rs);
  ns = length(cs);
  B = zeros(nr,ns);
  for (i = 1:ns)
    r2 = sum((repmat(gf.X(:,cs(i)),1,nr) - gf.X(:,rs)).^2);
    % For parameter eps in eps^2 = delta, this is called Plummer softening, at
    % least in gravity simulations.
    r = sqrt(r2 + gf.delta);
    if (gf.order > 0)
      B(:,i) = 1./r.^gf.order;
    else
      B(:,i) = log(r);
    end
    B(:,i) = B(:,i)*gf.charge(cs(i));
    if (gf.zero_diag)
      B(r2 == 0, i) = 0;
    end
  end
  if (~gf.zero_diag && gf.delta == 0)
    B(isinf(B)) = 0;
  end
end

function o = popt (o, fld, val)
  if (~isfield(o, fld)) o.(fld) = val; end
end

function o = popts (o, fvs)
  for (i = 1:numel(fvs))
    if (~isfield(o, fvs{i}{1})) o.(fvs{i}{1}) = fvs{i}{2}; end
  end
end

function sd = transfer_fields (sd, ss, flds)
  if (~iscell(flds)) flds = {flds}; end
  for (i = 1:numel(flds))
    if (isfield(ss, flds{i})) sd.(flds{i}) = ss.(flds{i}); end
  end
end

function re = relerr (a, b, p)
  if (nargin < 3) p = 'fro'; end
  re = norm(a - b, p)/norm(a, p);
  if (isnan(re))
    if (isempty(a) || all(a(:) == b(:))) re = 0; end
  end
end
