classdef dc3dm, methods (Static)
% Matlab interface to dc3dm. This is for convenience only; dc3dm does not
% require Matlab.

% ------------------------------------------------------------------------------
% Read and write key-value files.
  
  function WriteKvf (fn, c, allow_overwrite)
  % WriteKvf(fn, c, allow_overwrite)
  %   c is a struct containing string and numeric fields. Write it to the file
  % fn.kvf. This fill will be used by the program fdra2c. The file is not
  % necessarily portable to other machines.    
    if (nargin < 3) allow_overwrite = false; end
    fn = [fn '.kvf'];
    if (~allow_overwrite && exist(fn, 'file'))
      error(sprintf('Write:Kvf: I don''t want to overwrite %s!\n', fn));
    end
    fptr = fopen(fn, 'wb');
    if (fptr == -1) error(sprintf('Could not open %s for writing.', fn)); end
    kvf_Write(fptr, c);
    fclose(fptr);
  end

  function c = ReadKvf (fn)
  % c = ReadKvf(fn)
  %   Load a struct from the file fn.kvf.
    fn = [fn '.kvf'];
    fptr = fopen(fn, 'rb');
    if (fptr == -1) error(sprintf('Could not open %s for reading.', fn)); end
    c = kvf_Read(fptr);
    fclose(fptr);
  end
    
% ------------------------------------------------------------------------------
% Get data from .ra and .rmu files.
  
  function rs = mRects (rm_fn)
    rmesh('read', rm_fn);
    rs = rmesh('getrects');
  end
  
  function c = mData (rs)
    c.dx = min(rs(3,:));
    c.dy = min(rs(4,:));
    c.Dx = max(rs(3,:));
    c.Dy = max(rs(4,:));
    c.xlim = [min(rs(1,:)) max(rs(1,:) + rs(3,:))];
    c.ylim = [min(rs(2,:)) max(rs(2,:) + rs(4,:))];
  end
  
  function id = mIds (rm_fn, X, Y)
    rmesh('read', rm_fn);
    id = rmesh('getids', X, Y);
  end
  
  function A = mLinterp (rm_fn, a, bdy_vals, X, Y)
    rmesh('read', rm_fn);
    A = rmesh('linterp', double(a), double(bdy_vals), X, Y);
  end

  function [x y] = mCC (rs)
    x = rs(1,:) + 0.5*rs(3,:);
    y = rs(2,:) + 0.5*rs(4,:);
    x = x(:);
    y = y(:);
    if (nargout == 1) x = [x y]; end
  end

  function A = mImage (rm_filename, A, x, y)
    [X Y] = meshgrid(x, y);
    rmesh('read', rm_filename);
    id = rmesh('getids', X(:), Y(:));
    id = reshape(id, size(X));
    A = A(id);
  end
  
  function ViewRmesh (c)
  % c is the key-value-file struct for dc3dmMesh.
    rs = dc3dm.mRects(c.mesh_write_filename);
    [X Y] = meshgrid(c.x, c.y);
    ids = dc3dm.mIds(c.mesh_write_filename, X, Y);
    subplot(211);
    imagesc(c.x, c.y, c.f);
    colorbar; title('Resolution function'); axis image; ca1 = caxis();
    subplot(212);
    imagesc(c.x, c.y, reshape(max(rs(3:4,ids(:))), numel(c.y), numel(c.x)));
    colorbar; title('Element size'); axis image; ca2 = caxis();
    for (i = 1:2)
      subplot(2,1,i); caxis([min(ca1(1), ca2(1)) max(ca1(2), ca2(2))]);
    end
  end
  
end, end

% ------------------------------------------------------------------------------
% Private.

function kvf_Write(fptr, c)
  flds = fieldnames(c);
  for (i = 1:numel(flds))
    d = c.(flds{i});
    if ((isnumeric(d) || islogical(d)) && all(isreal(d)))
      kvf_WriteString(fptr, flds{i});
      kvf_WriteCode(fptr, 'da');
      kvf_WriteInts(fptr, size(d));
      kvf_WriteArrayData(fptr, d);
    elseif (ischar(d))
      kvf_WriteString(fptr, flds{i});
      kvf_WriteCode(fptr, 'st');
      kvf_WriteString(fptr, d);
    else
      fprintf(1, 'Write: Skipping %s.\n', flds{i});
    end
  end
end

function kvf_WriteCode(fptr, code)
  if (fwrite(fptr, code, 'char') ~= 2)
    error(sprintf('Failed to write code %s.', code));
  end
end

function kvf_WriteString(fptr, s)
  if (fwrite(fptr, numel(s), 'int64') ~= 1 ||...
      fwrite(fptr, s, 'char') ~= numel(s))
    error(sprintf('Failed to write string %s.', s));
  end
end

function kvf_WriteInts(fptr, sz)
  nsz = numel(sz);
  if (fwrite(fptr, [nsz sz(:).'], 'int64') ~= nsz + 1)
    error('Failed to write ints.');
  end
end

function kvf_WriteArrayData(fptr, d)
  if (fwrite(fptr, d(:), 'double') ~= numel(d))
    error('Failed to write data.');
  end
end

function c = kvf_Read(fptr)
  c = struct();
  while (true)
    try
      fld = kvf_ReadString(fptr);
    catch
      if (~feof(fptr)) error('Error reading fieldname.');
      else break; end
    end
    code = fread(fptr, 2, 'char');
    code = char(code(:).');
    switch (code)
     case 'st'
      c.(fld) = kvf_ReadString(fptr);
     case 'da'
      c.(fld) = kvf_ReadArray(fptr);
     otherwise
      error(sprintf('Wrong code %s.', code));
    end
  end
end

function s = kvf_ReadString(fptr)
  n = kvf_ReadInts(fptr, 1);
  s = fread(fptr, n, 'char');
  if (numel(s) ~= n)
    error(sprintf('Read only %s of what should have length %d.', s, n));
  end
  s = char(s(:).');
end

function a = kvf_ReadArray(fptr)
  n = kvf_ReadInts(fptr, 1);
  sz = kvf_ReadInts(fptr, n);
  n = prod(sz);
  a = fread(fptr, n, 'double');
  if (numel(a) ~= n)
    error(sprintf('Read %d of expected %d.', numel(a), n));
  end
  a = reshape(a, sz(:).');
end
  
function a = kvf_ReadInts(fptr, n)
  a = fread(fptr, n, 'int64');
  if (any(a ~= round(a)))
    error('Expected integers.')
  end
end

